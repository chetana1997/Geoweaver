{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Geoweaver 2018 ESIP Lab Incubator Project Geoweaver is an in-browser software allowing users to easily compose and execute full-stack data processing workflows via taking advantage of online spatial data facilities, high-performance computation platforms, and open-source deep learning libraries. It provides all-in-one capacity covering server management, code repository, workflow orchestration software, and history recorder. It can be run from both local and remote (distributed) machines. GeoWeaver is a community effort. Any contribution is welcome and greatly appreciated! Software Goals Only two things basically: Make it time affordable for less-coder scientists (who know nothing about WfMS) to manage their data processing workflows Preserve all the model run history and share them along with the code files Installation Tutorial Create and Manipulate Hosts Create and Run Processes Create, Run, and Export Workflows Jupyter Recording Demo A live demo site is available. Citation If you found Geoweaver helpful in your research, please cite: Sun, Z. et al., \"Geoweaver: Advanced cyberinfrastructure for managing hybrid geoscientific AI workflows.\" ISPRS International Journal of Geo-Information 9, no. 2 (2020): 119. Dependencies This project is impossible without the support of several fantastic open source libraries. d3.js - BSD 3-Clause graph-creator - MIT License bootstrap - MIT License CodeMirror - MIT License JQuery Terminal - MIT License Community License MIT","title":"Home"},{"location":"#geoweaver","text":"2018 ESIP Lab Incubator Project Geoweaver is an in-browser software allowing users to easily compose and execute full-stack data processing workflows via taking advantage of online spatial data facilities, high-performance computation platforms, and open-source deep learning libraries. It provides all-in-one capacity covering server management, code repository, workflow orchestration software, and history recorder. It can be run from both local and remote (distributed) machines. GeoWeaver is a community effort. Any contribution is welcome and greatly appreciated!","title":"Geoweaver"},{"location":"#software-goals","text":"Only two things basically: Make it time affordable for less-coder scientists (who know nothing about WfMS) to manage their data processing workflows Preserve all the model run history and share them along with the code files","title":"Software Goals"},{"location":"#installation","text":"","title":"Installation"},{"location":"#tutorial","text":"Create and Manipulate Hosts Create and Run Processes Create, Run, and Export Workflows Jupyter Recording","title":"Tutorial"},{"location":"#demo","text":"A live demo site is available.","title":"Demo"},{"location":"#citation","text":"If you found Geoweaver helpful in your research, please cite: Sun, Z. et al., \"Geoweaver: Advanced cyberinfrastructure for managing hybrid geoscientific AI workflows.\" ISPRS International Journal of Geo-Information 9, no. 2 (2020): 119.","title":"Citation"},{"location":"#dependencies","text":"This project is impossible without the support of several fantastic open source libraries. d3.js - BSD 3-Clause graph-creator - MIT License bootstrap - MIT License CodeMirror - MIT License JQuery Terminal - MIT License","title":"Dependencies"},{"location":"#community","text":"","title":"Community"},{"location":"#license","text":"MIT","title":"License"},{"location":"authors/","text":"Geoweaver is a community effort and many community members have contributed their time and effort in it. Please see full contributor list below: developer list","title":"Authors"},{"location":"host/","text":"Host in Geoweaver What is Host? In Geoweaver, Host means computing machines. It is where the code gets executed, data gets processed, and history is generated. In most time, Host is dedicated to be the local machine where Geoweaver is installed. Once Geoweaver is started, it will add a default Host Localhost which means the current machine Geoweaver is sitting on. For most people, Localhost is all they need. They can run all their processes on Localhost . For cool kids, they might want to run their processes on remote servers, e.g., AWS EC2 instances, HPC. In that case, Geoweaver provides convenient options to enroll remote servers and run your code there but manage all of these distributed work in one place. This is a life-saving feature for multiple-server users. No kidding. This tutorial will show how to enroll a new Host and make it ready for running processes in Geoweaver. Create a Host Click the plus button after Host on the right panel. Input Host Name , Host IP , Port , and User Name of your server in the shown dialog. Here is an example: Host Name: Test Server Host IP: 127.0.0.1 Port: 22 User Name: testuser Click Add . A new host node Test Server will show under the Host > SSH Server tree node. Read Python Environment TBD File Browser TBD File Uploader TBD Edit a Host TBD Supported Hosts SSH Server SSH, or Secure Shell, is a remote administration protocol that allows users to control remote servers over the Internet. The service was created as a secure replacement for the unencrypted Telnet and uses cryptographic techniques to ensure that all communication to and from the remote server happens in an encrypted manner. It provides a mechanism for authenticating a remote user, transferring inputs from the client to the host, and relaying the output back to the client. Geoweaver provides a Host category called SSH Server to manage all the remote servers with SSH enabled. There is a builtin SSH console to login and type command lines to directly run scripts. Geoweaver also provides a file browser and uploader for users to transfer the files from/to remote servers. Geoweaver can be considered as two-in-one alternative for SSH client and FTP client. Jupyter NoteBook Server Jupyter Notebook is an open source web application that allows you to create and share documents that contain live code, equations, visualization, and narrative text. In Geoweaver, you can manage multiple Jupyter Notebook server in one place. It will provide a proxy for you to record your usage history during eidting the notebooks. All the history will be automatically recorded when you click Save button or shortcut inside the Jupyter Notebook. The history will be retrievable in Geoweaver database and people can always go back and verify their experiments using the history button of the Jupyter host in Geoweaver. Jupyter Hub JupyterHub is a multi-user version of the Jupyter Notebook designed for companies, classrooms and research labs. Geoweaver supports JupyterHub in a similar way to the Jupyter Notebook. People can manage multiple JupyterHub servers in Geoweaver. They can record their usage history in each JupyterHub in Geoweaver database which is queriable in future, even the original JupyterHub is gone. With the history, people can clearly understand what happens and reproduce the experiments with minimum efforts in a new environment. Jupyter Lab JupyterLab is a web-based interactive development environment for Jupyter notebooks, code, and data. It is more like a combination of Jupyter Notebook and many other useful tools (e.g., file browser, data visualization module, status monitor, etc). Geoweaver supports Jupyter Lab in a similar to Jupyter Notebook and JupyterHub. People can manage multiple JupyterLab in Geoweaver and Geoweaver provides a proxy to monitor the traffic between users and Jupyter Lab and record the history in its database. The history database will persist even after the computing server the JupyterLab was hosted is gone. Geoweaver will significantly improve the management of distributed JupyterLab and enhance the transparency, reusuability, and reproducibility of all the work done in JupyterLab.","title":"Host in Geoweaver"},{"location":"host/#host-in-geoweaver","text":"","title":"Host in Geoweaver"},{"location":"host/#what-is-host","text":"In Geoweaver, Host means computing machines. It is where the code gets executed, data gets processed, and history is generated. In most time, Host is dedicated to be the local machine where Geoweaver is installed. Once Geoweaver is started, it will add a default Host Localhost which means the current machine Geoweaver is sitting on. For most people, Localhost is all they need. They can run all their processes on Localhost . For cool kids, they might want to run their processes on remote servers, e.g., AWS EC2 instances, HPC. In that case, Geoweaver provides convenient options to enroll remote servers and run your code there but manage all of these distributed work in one place. This is a life-saving feature for multiple-server users. No kidding. This tutorial will show how to enroll a new Host and make it ready for running processes in Geoweaver.","title":"What is Host?"},{"location":"host/#create-a-host","text":"Click the plus button after Host on the right panel. Input Host Name , Host IP , Port , and User Name of your server in the shown dialog. Here is an example: Host Name: Test Server Host IP: 127.0.0.1 Port: 22 User Name: testuser Click Add . A new host node Test Server will show under the Host > SSH Server tree node.","title":"Create a Host"},{"location":"host/#read-python-environment","text":"TBD","title":"Read Python Environment"},{"location":"host/#file-browser","text":"TBD","title":"File Browser"},{"location":"host/#file-uploader","text":"TBD","title":"File Uploader"},{"location":"host/#edit-a-host","text":"TBD","title":"Edit a Host"},{"location":"host/#supported-hosts","text":"","title":"Supported Hosts"},{"location":"host/#ssh-server","text":"SSH, or Secure Shell, is a remote administration protocol that allows users to control remote servers over the Internet. The service was created as a secure replacement for the unencrypted Telnet and uses cryptographic techniques to ensure that all communication to and from the remote server happens in an encrypted manner. It provides a mechanism for authenticating a remote user, transferring inputs from the client to the host, and relaying the output back to the client. Geoweaver provides a Host category called SSH Server to manage all the remote servers with SSH enabled. There is a builtin SSH console to login and type command lines to directly run scripts. Geoweaver also provides a file browser and uploader for users to transfer the files from/to remote servers. Geoweaver can be considered as two-in-one alternative for SSH client and FTP client.","title":"SSH Server"},{"location":"host/#jupyter-notebook-server","text":"Jupyter Notebook is an open source web application that allows you to create and share documents that contain live code, equations, visualization, and narrative text. In Geoweaver, you can manage multiple Jupyter Notebook server in one place. It will provide a proxy for you to record your usage history during eidting the notebooks. All the history will be automatically recorded when you click Save button or shortcut inside the Jupyter Notebook. The history will be retrievable in Geoweaver database and people can always go back and verify their experiments using the history button of the Jupyter host in Geoweaver.","title":"Jupyter NoteBook Server"},{"location":"host/#jupyter-hub","text":"JupyterHub is a multi-user version of the Jupyter Notebook designed for companies, classrooms and research labs. Geoweaver supports JupyterHub in a similar way to the Jupyter Notebook. People can manage multiple JupyterHub servers in Geoweaver. They can record their usage history in each JupyterHub in Geoweaver database which is queriable in future, even the original JupyterHub is gone. With the history, people can clearly understand what happens and reproduce the experiments with minimum efforts in a new environment.","title":"Jupyter Hub"},{"location":"host/#jupyter-lab","text":"JupyterLab is a web-based interactive development environment for Jupyter notebooks, code, and data. It is more like a combination of Jupyter Notebook and many other useful tools (e.g., file browser, data visualization module, status monitor, etc). Geoweaver supports Jupyter Lab in a similar to Jupyter Notebook and JupyterHub. People can manage multiple JupyterLab in Geoweaver and Geoweaver provides a proxy to monitor the traffic between users and Jupyter Lab and record the history in its database. The history database will persist even after the computing server the JupyterLab was hosted is gone. Geoweaver will significantly improve the management of distributed JupyterLab and enhance the transparency, reusuability, and reproducibility of all the work done in JupyterLab.","title":"Jupyter Lab"},{"location":"http-proxy/","text":"How to set up HTTP Proxy for Geoweaver When deploying Geoweaver to a public server, the default port 8070 is normally blocked. To access Geoweaver, you need to set up a proxy in the HTTP server. Here is a how-to guide for Apache server. Apache Proxy for Geoweaver This guide uses Apache 2.4.39. It should work for any newer version. For older version, there might be changes. Please report if running into issues. Open your default site HTTP configuration file /etc/apache2/sites-available/000-default.conf . Add the following lines into the code block of <VirtualHost *:80> : ProxyPreserveHost On ProxyPass /Geoweaver/jupyter-socket ws://localhost:8070/Geoweaver/jupyter-socket ProxypassReverse /Geoweaver/jupyter-socket ws://localhost:8070/Geoweaver/jupyter-socket ProxyPass /Geoweaver/workflow-socket ws://localhost:8070/Geoweaver/workflow-socket ProxypassReverse /Geoweaver/workflow-socket ws://localhost:8070/Geoweaver/workflow-socket ProxyPass /Geoweaver/command-socket ws://localhost:8070/Geoweaver/command-socket ProxypassReverse /Geoweaver/command-socket ws://localhost:8070/Geoweaver/command-socket ProxyPass /Geoweaver/terminal-socket ws://localhost:8070/Geoweaver/terminal-socket ProxypassReverse /Geoweaver/terminal-socket ws://localhost:8070/Geoweaver/terminal-socket ProxyPass \"/Geoweaver\" \"http://localhost:8070/Geoweaver\" ProxyPassReverse \"/Geoweaver\" \"http://localhost:8070/Geoweaver\" Restart Apache using: service apache restart . Geoweaver should now be accessible at http://<your_server_domain>/Geoweaver . Nginx Proxy for Geoweaver TBD","title":"How to set up HTTP Proxy for Geoweaver"},{"location":"http-proxy/#how-to-set-up-http-proxy-for-geoweaver","text":"When deploying Geoweaver to a public server, the default port 8070 is normally blocked. To access Geoweaver, you need to set up a proxy in the HTTP server. Here is a how-to guide for Apache server.","title":"How to set up HTTP Proxy for Geoweaver"},{"location":"http-proxy/#apache-proxy-for-geoweaver","text":"This guide uses Apache 2.4.39. It should work for any newer version. For older version, there might be changes. Please report if running into issues. Open your default site HTTP configuration file /etc/apache2/sites-available/000-default.conf . Add the following lines into the code block of <VirtualHost *:80> : ProxyPreserveHost On ProxyPass /Geoweaver/jupyter-socket ws://localhost:8070/Geoweaver/jupyter-socket ProxypassReverse /Geoweaver/jupyter-socket ws://localhost:8070/Geoweaver/jupyter-socket ProxyPass /Geoweaver/workflow-socket ws://localhost:8070/Geoweaver/workflow-socket ProxypassReverse /Geoweaver/workflow-socket ws://localhost:8070/Geoweaver/workflow-socket ProxyPass /Geoweaver/command-socket ws://localhost:8070/Geoweaver/command-socket ProxypassReverse /Geoweaver/command-socket ws://localhost:8070/Geoweaver/command-socket ProxyPass /Geoweaver/terminal-socket ws://localhost:8070/Geoweaver/terminal-socket ProxypassReverse /Geoweaver/terminal-socket ws://localhost:8070/Geoweaver/terminal-socket ProxyPass \"/Geoweaver\" \"http://localhost:8070/Geoweaver\" ProxyPassReverse \"/Geoweaver\" \"http://localhost:8070/Geoweaver\" Restart Apache using: service apache restart . Geoweaver should now be accessible at http://<your_server_domain>/Geoweaver .","title":"Apache Proxy for Geoweaver"},{"location":"http-proxy/#nginx-proxy-for-geoweaver","text":"TBD","title":"Nginx Proxy for Geoweaver"},{"location":"install/","text":"Installation Dependencies Java 1.8+ (OpenJDK 8 or higher) !(only for install via docker) Docker 18.09.1+ !(only for install via docker) Docker-compose 1.23.1+ Quick Install (Recommended for Linux, Mac, and Windows) Step 1: Download the latest version of geoweaver.jar Step 2: Run the command: java -jar geoweaver.jar Step 3: Open browser and enter: http://localhost:8070/Geoweaver/ .That's it! Build from source Use maven to build. In the command line go to the root folder and execute mvn install . After a success build, the Geoweaver jar package will be under the directory: Geoweaver/target/Geoweaver-<version>.jar . Reset Password for Localhost Geoweaver will automatically create a password for localhost. It will only show once at first run of Geoweaver. It is recommended to copy and save it at a safe place. If forget or missed that password, please run the following command to reset: java -jar geoweaver.jar resetpassword Set up HTTP Proxy","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#dependencies","text":"Java 1.8+ (OpenJDK 8 or higher) !(only for install via docker) Docker 18.09.1+ !(only for install via docker) Docker-compose 1.23.1+","title":"Dependencies"},{"location":"install/#quick-install","text":"(Recommended for Linux, Mac, and Windows) Step 1: Download the latest version of geoweaver.jar Step 2: Run the command: java -jar geoweaver.jar Step 3: Open browser and enter: http://localhost:8070/Geoweaver/ .That's it!","title":"Quick Install"},{"location":"install/#build-from-source","text":"Use maven to build. In the command line go to the root folder and execute mvn install . After a success build, the Geoweaver jar package will be under the directory: Geoweaver/target/Geoweaver-<version>.jar .","title":"Build from source"},{"location":"install/#reset-password-for-localhost","text":"Geoweaver will automatically create a password for localhost. It will only show once at first run of Geoweaver. It is recommended to copy and save it at a safe place. If forget or missed that password, please run the following command to reset: java -jar geoweaver.jar resetpassword","title":"Reset Password for Localhost"},{"location":"install/#set-up-http-proxy","text":"","title":"Set up HTTP Proxy"},{"location":"process/","text":"Processes in Geoweaver What is Process? Process means code scripts to process data. You can understand it as source code like Python. However, Process in Geoweaver is more dedicated to the source code for data processing . Note: It is not designed for everything . You might be able to run any code like starting a HTTP server, or starting a GUI software, but it would be inappropriate and might cause issues. We recommend users to restrict the Process code to be something that is finishable (no hanging), algorithmic, and data oriented . Create a new Python process Click the plus icon button after Process on the right panel. Select Python from the Language dropdown select. Input helloworld for the name. Add code to the code area. For example: print(\"hello world\") Click Add on the bottom. A new process node helloworld will be added to the Process > Python tree. Run Python Process Click on the newly added helloworld process. An information panel will show in the main area. Click the play button to run the process. In the popup window, select Localhost and click Execute . A dialog will show to specify Python environment, click Confirm to the default . In the password dialog, input your password for Localhost . Click confirm . If you see hello world printed in the logging window, it means you have successfully created and run your first process in Geoweaver. Congratulations! You did it! Supported Code Scripts Geoweaver supports four types of processes to be executed on the SSH hosts enlisted in the Host section: Shell script, Notebooks, Python code, and Builtin processes. Shell Shell scripts can be directly created, saved, executed, and monitored in Geoweaver. Users can execute the shell scripts on remote servers or the localhost server which Geoweaver is hosted. Python Python is one of the most popular AI programming langauge and most AI-related packages reside in Python. Geoweaver supports Python coding and scripting on top of multiple servers while reserving and maintaining the code in one database. All the historical runs are recorded and served in Geoweaver to prevent future duplicated attempts and significantly improve the reproducibility and reusability of AI programs. NoteBook Geoweaver supports to run Jupyter notebooks using the nbconvert command. The notebook and its logout are recorded in the database. Running notebook in Geoweaver will be equivalent to running jupyter nbconvert --inplace --allow-errors --to notebook --execute <notebook_file_path> . New notebook snapshots generated by every run will be all saved in the Geoweaver database . No more worries on forgetting the results of your previous experiment configuration! Everything is covered. Build In Process To help people with limited programming skills, we are developing a set of built-in processes which have fixed program code and expose only input parameters to users. These processes make Geoweaver a powerful AI graphical user interface for the diverse user groups to learn and experiment their AI workflows without coding. Most buil-in processes in Geoweaver are developed based on the existing AI python ecosystem like Keras and Scikit-learn. This section is under intensive development right and the first stable version expects users to create a full-stack AI workflow without writing a single line of code.","title":"Processes in Geoweaver"},{"location":"process/#processes-in-geoweaver","text":"","title":"Processes in Geoweaver"},{"location":"process/#what-is-process","text":"Process means code scripts to process data. You can understand it as source code like Python. However, Process in Geoweaver is more dedicated to the source code for data processing . Note: It is not designed for everything . You might be able to run any code like starting a HTTP server, or starting a GUI software, but it would be inappropriate and might cause issues. We recommend users to restrict the Process code to be something that is finishable (no hanging), algorithmic, and data oriented .","title":"What is Process?"},{"location":"process/#create-a-new-python-process","text":"Click the plus icon button after Process on the right panel. Select Python from the Language dropdown select. Input helloworld for the name. Add code to the code area. For example: print(\"hello world\") Click Add on the bottom. A new process node helloworld will be added to the Process > Python tree.","title":"Create a new Python process"},{"location":"process/#run-python-process","text":"Click on the newly added helloworld process. An information panel will show in the main area. Click the play button to run the process. In the popup window, select Localhost and click Execute . A dialog will show to specify Python environment, click Confirm to the default . In the password dialog, input your password for Localhost . Click confirm . If you see hello world printed in the logging window, it means you have successfully created and run your first process in Geoweaver. Congratulations! You did it!","title":"Run Python Process"},{"location":"process/#supported-code-scripts","text":"Geoweaver supports four types of processes to be executed on the SSH hosts enlisted in the Host section: Shell script, Notebooks, Python code, and Builtin processes.","title":"Supported Code Scripts"},{"location":"process/#shell","text":"Shell scripts can be directly created, saved, executed, and monitored in Geoweaver. Users can execute the shell scripts on remote servers or the localhost server which Geoweaver is hosted.","title":"Shell"},{"location":"process/#python","text":"Python is one of the most popular AI programming langauge and most AI-related packages reside in Python. Geoweaver supports Python coding and scripting on top of multiple servers while reserving and maintaining the code in one database. All the historical runs are recorded and served in Geoweaver to prevent future duplicated attempts and significantly improve the reproducibility and reusability of AI programs.","title":"Python"},{"location":"process/#notebook","text":"Geoweaver supports to run Jupyter notebooks using the nbconvert command. The notebook and its logout are recorded in the database. Running notebook in Geoweaver will be equivalent to running jupyter nbconvert --inplace --allow-errors --to notebook --execute <notebook_file_path> . New notebook snapshots generated by every run will be all saved in the Geoweaver database . No more worries on forgetting the results of your previous experiment configuration! Everything is covered.","title":"NoteBook"},{"location":"process/#build-in-process","text":"To help people with limited programming skills, we are developing a set of built-in processes which have fixed program code and expose only input parameters to users. These processes make Geoweaver a powerful AI graphical user interface for the diverse user groups to learn and experiment their AI workflows without coding. Most buil-in processes in Geoweaver are developed based on the existing AI python ecosystem like Keras and Scikit-learn. This section is under intensive development right and the first stable version expects users to create a full-stack AI workflow without writing a single line of code.","title":"Build In Process"},{"location":"workflow/","text":"Workflow in Geoweaver What is Workflow? In Geoweaver, Workflow denotes a pipeline linking multiple (>2) Processes. Isolated Process (not connected to any other Processes) is allowed in Geoweaver. WARNING: Loop is not allowed among the child Process nodes . The Workflow graph is directed and acyclic (please refer to DAG ). Create and run a workflow Click twice on the plus icon button after any process (e.g., helloworld Python process created in the Process tutorial ). The main work area will switch to the \"Weaver\" tab and two circles containing helloworld should appear in the workspace. Link the two circles by dragging from one circle and dropping on another circle while pressing SHIFT on the keyboard. Click the plus button in the Options toolbar floating in the Weaver workspace. In the popup window, input HelloWorldWorkflow for the workflow name, and type Testing hello world in the Description field. Click Confirm . To run the workflow, click . In the popup window, select 1one-host option. Choose localhost and set the environment to the default. Click Run . In the password dialog, enter the password for localhost. While the workflow is in execution mode, blue means the process is waiting, yellow means the corresponding process is running, green means the process execution is finished, and red means the process execution is failed for some reason. Double click on the circles to check the real time output. If users need more details, click Details button in the popup information window. Export and share a workflow To export a workflow into a zip file: Choose a workflow in the Workflow tree menu and click on it. Click the downward icon button in the floating toolbar when the workflow is present in the Weaver workspace. There will be two downloading options: workflow with process code and workflow with process code and history . The former will only download source code and workflow json. The latter will download not only source code and workflow, but also all the history details of previous execution of the workflow. The second option is recommended. Click Confirm . A ZIP file will be automatically downloaded to your machine. To import a shared workflow: Click the upward icon button in the floating toolbar of Weaver. In the shown window, click Open the File Browser and choose the Geoweaver ZIP file you received. Click Start . Once the uploading finished and if the workflow file is valid, it will ask The upload workflow is valid. Do you want to proceed to save it into the database? Click OK . The workflow will be automatically loaded into the Weaver workspace and ready for execution and reuse. If you check the process and workflow history, you will see all the previous logs are also there. Congratulations you have learnt how to create, run, export, and share a workflow in Geoweaver!","title":"Workflow in Geoweaver"},{"location":"workflow/#workflow-in-geoweaver","text":"","title":"Workflow in Geoweaver"},{"location":"workflow/#what-is-workflow","text":"In Geoweaver, Workflow denotes a pipeline linking multiple (>2) Processes. Isolated Process (not connected to any other Processes) is allowed in Geoweaver. WARNING: Loop is not allowed among the child Process nodes . The Workflow graph is directed and acyclic (please refer to DAG ).","title":"What is Workflow?"},{"location":"workflow/#create-and-run-a-workflow","text":"Click twice on the plus icon button after any process (e.g., helloworld Python process created in the Process tutorial ). The main work area will switch to the \"Weaver\" tab and two circles containing helloworld should appear in the workspace. Link the two circles by dragging from one circle and dropping on another circle while pressing SHIFT on the keyboard. Click the plus button in the Options toolbar floating in the Weaver workspace. In the popup window, input HelloWorldWorkflow for the workflow name, and type Testing hello world in the Description field. Click Confirm . To run the workflow, click . In the popup window, select 1one-host option. Choose localhost and set the environment to the default. Click Run . In the password dialog, enter the password for localhost. While the workflow is in execution mode, blue means the process is waiting, yellow means the corresponding process is running, green means the process execution is finished, and red means the process execution is failed for some reason. Double click on the circles to check the real time output. If users need more details, click Details button in the popup information window.","title":"Create and run a workflow"},{"location":"workflow/#export-and-share-a-workflow","text":"To export a workflow into a zip file: Choose a workflow in the Workflow tree menu and click on it. Click the downward icon button in the floating toolbar when the workflow is present in the Weaver workspace. There will be two downloading options: workflow with process code and workflow with process code and history . The former will only download source code and workflow json. The latter will download not only source code and workflow, but also all the history details of previous execution of the workflow. The second option is recommended. Click Confirm . A ZIP file will be automatically downloaded to your machine. To import a shared workflow: Click the upward icon button in the floating toolbar of Weaver. In the shown window, click Open the File Browser and choose the Geoweaver ZIP file you received. Click Start . Once the uploading finished and if the workflow file is valid, it will ask The upload workflow is valid. Do you want to proceed to save it into the database? Click OK . The workflow will be automatically loaded into the Weaver workspace and ready for execution and reuse. If you check the process and workflow history, you will see all the previous logs are also there. Congratulations you have learnt how to create, run, export, and share a workflow in Geoweaver!","title":"Export and share a workflow"}]}